// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel HANG
#pragma kernel FREEDROP

RWStructuredBuffer<float4>Position;
RWStructuredBuffer<float4>Velocity;
float vertn;
float vertm;
float RestLengthHoriz;
float RestLengthVert;
float RestLengthDiag;
float4 sphere1;
float4 sphere2;

[numthreads(8,8,1)]
void HANG (uint3 id : SV_DispatchThreadID)
{
	float3 nParticles = float3(vertn, vertm, 1);
	float vertexes = vertn*vertm;

	float3 Gravity = float3(0, -10.0f, 0);
	float ParticleMass = 0.1f;
	float ParticleInvMass = 10.0f;
	float SpringK = 2000.0f;
	float DeltaT = 0.000005f;
	float DampingConst = 0.1f;

	uint idx = id.y * vertn + id.x;
	float3 p = float3(Position[idx].xyz);
	float3 v = float3(Velocity[idx].xyz);
	float3 r;

	float3 force = Gravity * ParticleMass;

	if (id.y < nParticles.y - 1) {
		r = Position[idx + nParticles.x].xyz - p;
		force += normalize(r) * SpringK * (length(r) - RestLengthVert);
	}
	// Below
	if (id.y > 0) {
		r = Position[idx - nParticles.x].xyz - p;
		force += normalize(r) * SpringK * (length(r) - RestLengthVert);
	}
	// Left
	if (id.x > 0) {
		r = Position[idx - 1].xyz - p;
		force += normalize(r) * SpringK * (length(r) - RestLengthHoriz);
	}
	// Right
	if (id.x < nParticles.x - 1) {
		r = Position[idx + 1].xyz - p;
		force += normalize(r) * SpringK * (length(r) - RestLengthHoriz);
	}

	// Diagonals
	// Upper-left
	if (id.x > 0 && id.y < nParticles.y - 1) {
		r = Position[idx + nParticles.x - 1].xyz - p;
		force += normalize(r) * SpringK * (length(r) - RestLengthDiag);
	}
	// Upper-right
	if (id.x < nParticles.x - 1 && id.y < nParticles.y - 1) {
		r = Position[idx + nParticles.x + 1].xyz - p;
		force += normalize(r) * SpringK * (length(r) - RestLengthDiag);
	}
	// lower -left
	if (id.x > 0 && id.y > 0) {
		r = Position[idx - nParticles.x - 1].xyz - p;
		force += normalize(r) * SpringK * (length(r) - RestLengthDiag);
	}
	// lower-right
	if (id.x < nParticles.x - 1 && id.y > 0) {
		r = Position[idx - nParticles.x + 1].xyz - p;
		force += normalize(r) * SpringK * (length(r) - RestLengthDiag);
	}

	force += -DampingConst * v;

	// Apply simple Euler integrator
	float3 a = force * ParticleInvMass;
	Position[idx] = float4(
		p + v * DeltaT + 0.5 * a * DeltaT * DeltaT, 1.0);
	Velocity[idx] = float4(v + a * DeltaT, 0.0);

	// Pin a few of the top verts
	if (id.y == nParticles.y - 1 &&
		(id.x == 0 ||
			id.x == nParticles.x / 4 ||
			id.x == nParticles.x * 2 / 4 ||
			id.x == nParticles.x * 3 / 4 ||
			id.x == nParticles.x - 1)) {
		Position[idx] = float4(p, 1.0);
		Velocity[idx] = float4(0, 0, 0, 0);
	}
}

[numthreads(8, 8, 1)]
void FREEDROP(uint3 id : SV_DispatchThreadID) {
	float3 nParticles = float3(vertn, vertm, 1);
	float vertexes = vertn*vertm;

	float3 Gravity = float3(0, -10.0f, 0);
	float ParticleMass = 0.05f;
	float ParticleInvMass = 1.0f/ParticleMass;
	float SpringK = 20000.0f;
	float DeltaT = 0.000005f;
	float DampingConst = 0.1f;

	uint idx = id.y * vertn + id.x;
	float3 p = float3(Position[idx].xyz);
	float3 v = float3(Velocity[idx].xyz);
	float3 r;

	float3 force = Gravity * ParticleMass;

	if (id.y < nParticles.y - 1) {
		r = Position[idx + nParticles.x].xyz - p;
		force += normalize(r) * SpringK * (length(r) - RestLengthVert);
	}
	// Below
	if (id.y > 0) {
		r = Position[idx - nParticles.x].xyz - p;
		force += normalize(r) * SpringK * (length(r) - RestLengthVert);
	}
	// Left
	if (id.x > 0) {
		r = Position[idx - 1].xyz - p;
		force += normalize(r) * SpringK * (length(r) - RestLengthHoriz);
	}
	// Right
	if (id.x < nParticles.x - 1) {
		r = Position[idx + 1].xyz - p;
		force += normalize(r) * SpringK * (length(r) - RestLengthHoriz);
	}

	// Diagonals
	// Upper-left
	if (id.x > 0 && id.y < nParticles.y - 1) {
		r = Position[idx + nParticles.x - 1].xyz - p;
		force += normalize(r) * SpringK * (length(r) - RestLengthDiag);
	}
	// Upper-right
	if (id.x < nParticles.x - 1 && id.y < nParticles.y - 1) {
		r = Position[idx + nParticles.x + 1].xyz - p;
		force += normalize(r) * SpringK * (length(r) - RestLengthDiag);
	}
	// lower -left
	if (id.x > 0 && id.y > 0) {
		r = Position[idx - nParticles.x - 1].xyz - p;
		force += normalize(r) * SpringK * (length(r) - RestLengthDiag);
	}
	// lower-right
	if (id.x < nParticles.x - 1 && id.y > 0) {
		r = Position[idx - nParticles.x + 1].xyz - p;
		force += normalize(r) * SpringK * (length(r) - RestLengthDiag);
	}

	force += -DampingConst * v;

	// Apply simple Euler integrator
	float3 a = force * ParticleInvMass;
	Position[idx] = float4(
		p + v * DeltaT + 0.5 * a * DeltaT * DeltaT, 1.0);
	Velocity[idx] = float4(v + a * DeltaT, 0.0);

	if (Position[idx].y < -1) {
		Position[idx].y = -1;
		Velocity[idx] = Velocity[idx] * 0.05f;
	}
	if (distance(Position[idx],float3(sphere1.xyz) )<0.25f) {
		float3 f = Position[idx] - sphere1.xyz;
		Velocity[idx] = normalize(normalize(float4(f, 1.0f)) + Velocity[idx]);
	}
	if (distance(Position[idx], float3(sphere2.xyz))<0.125f) {
		float3 f = Position[idx] - sphere2.xyz;
		Velocity[idx] = normalize(normalize(float4(f,1.0f)) + Velocity[idx]);
		
	}
	
}